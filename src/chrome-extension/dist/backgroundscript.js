!function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r){console.log("HTTP PROXY EXTENSION INITIALIZED");const t={},n=["content-security-policy","x-frame-options"];function o(e){const r=new URL(e);return e.includes("localhost")?"https://steamcommunity.com"+r.pathname+r.search:e}chrome.webRequest.onHeadersReceived.addListener(e=>({responseHeaders:e.responseHeaders.filter(e=>!n.includes(e.name.toLowerCase()))}),{urls:["<all_urls>"]},["blocking","responseHeaders"]),chrome.webRequest.onBeforeSendHeaders.addListener(e=>(console.log("adding header",e.url,o(t[e.url])),e.requestHeaders.push({name:"client-id",value:"76561198203198914"},{name:"proxy-url",value:o(t[e.url])}),{requestHeaders:e.requestHeaders}),{urls:["<all_urls>"]},["requestHeaders","blocking"]),chrome.webRequest.onBeforeRequest.addListener(e=>{const r=new URL(e.url),n=(()=>{if(e.url.includes("localhost")){const n="https://steamcommunity.com"+r.pathname+r.search;return t[e.url]=n,console.log("steam url",n,"proxy url",e.url),e.url}{const n="http://localhost"+r.pathname+r.search;return t[n]=e.url,n}})();return t[n]=e.url,console.log("redirecting to",n),{redirectUrl:n}},{urls:["<all_urls>"]},["blocking"])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,